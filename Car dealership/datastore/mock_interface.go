// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package datastore is a generated GoMock package.
package datastore

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/zopsmart/GoLang-Interns-2022/tree/sahil-zs/models"
)

// MockCar is a mock of Car interface.
type MockCar struct {
	ctrl     *gomock.Controller
	recorder *MockCarMockRecorder
}

// MockCarMockRecorder is the mock recorder for MockCar.
type MockCarMockRecorder struct {
	mock *MockCar
}

// NewMockCar creates a new mock instance.
func NewMockCar(ctrl *gomock.Controller) *MockCar {
	mock := &MockCar{ctrl: ctrl}
	mock.recorder = &MockCarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCar) EXPECT() *MockCarMockRecorder {
	return m.recorder
}

// CreateCar mocks base method.
func (m *MockCar) CreateCar(ctx context.Context, car *models.Car) (models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", ctx, car)
	ret0, _ := ret[0].(models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockCarMockRecorder) CreateCar(ctx, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockCar)(nil).CreateCar), ctx, car)
}

// DeleteCar mocks base method.
func (m *MockCar) DeleteCar(ctx context.Context, id string) (models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCar", ctx, id)
	ret0, _ := ret[0].(models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCar indicates an expected call of DeleteCar.
func (mr *MockCarMockRecorder) DeleteCar(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCar", reflect.TypeOf((*MockCar)(nil).DeleteCar), ctx, id)
}

// GetCarByID mocks base method.
func (m *MockCar) GetCarByID(ctx context.Context, id string) (models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarByID", ctx, id)
	ret0, _ := ret[0].(models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarByID indicates an expected call of GetCarByID.
func (mr *MockCarMockRecorder) GetCarByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarByID", reflect.TypeOf((*MockCar)(nil).GetCarByID), ctx, id)
}

// GetCarsByBrand mocks base method.
func (m *MockCar) GetCarsByBrand(ctx context.Context, brand string, isEngine bool) ([]models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarsByBrand", ctx, brand, isEngine)
	ret0, _ := ret[0].([]models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarsByBrand indicates an expected call of GetCarsByBrand.
func (mr *MockCarMockRecorder) GetCarsByBrand(ctx, brand, isEngine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarsByBrand", reflect.TypeOf((*MockCar)(nil).GetCarsByBrand), ctx, brand, isEngine)
}

// UpdateCar mocks base method.
func (m *MockCar) UpdateCar(ctx context.Context, id string, car models.Car) (models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCar", ctx, id, car)
	ret0, _ := ret[0].(models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockCarMockRecorder) UpdateCar(ctx, id, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*MockCar)(nil).UpdateCar), ctx, id, car)
}

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// EngineCreate mocks base method.
func (m *MockEngine) EngineCreate(ctx context.Context, engine *models.Engine) (models.Engine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EngineCreate", ctx, engine)
	ret0, _ := ret[0].(models.Engine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EngineCreate indicates an expected call of EngineCreate.
func (mr *MockEngineMockRecorder) EngineCreate(ctx, engine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EngineCreate", reflect.TypeOf((*MockEngine)(nil).EngineCreate), ctx, engine)
}

// EngineDelete mocks base method.
func (m *MockEngine) EngineDelete(ctx context.Context, id string) (models.Engine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EngineDelete", ctx, id)
	ret0, _ := ret[0].(models.Engine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EngineDelete indicates an expected call of EngineDelete.
func (mr *MockEngineMockRecorder) EngineDelete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EngineDelete", reflect.TypeOf((*MockEngine)(nil).EngineDelete), ctx, id)
}

// EngineGetByID mocks base method.
func (m *MockEngine) EngineGetByID(ctx context.Context, id string) (models.Engine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EngineGetByID", ctx, id)
	ret0, _ := ret[0].(models.Engine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EngineGetByID indicates an expected call of EngineGetByID.
func (mr *MockEngineMockRecorder) EngineGetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EngineGetByID", reflect.TypeOf((*MockEngine)(nil).EngineGetByID), ctx, id)
}

// EngineUpdate mocks base method.
func (m *MockEngine) EngineUpdate(ctx context.Context, id string, engine models.Engine) (models.Engine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EngineUpdate", ctx, id, engine)
	ret0, _ := ret[0].(models.Engine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EngineUpdate indicates an expected call of EngineUpdate.
func (mr *MockEngineMockRecorder) EngineUpdate(ctx, id, engine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EngineUpdate", reflect.TypeOf((*MockEngine)(nil).EngineUpdate), ctx, id, engine)
}
